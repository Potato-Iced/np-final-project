야매:

전체 대충 흐름도{
|	1. 초기에 드론이 생성되면 랜덤으로 좌표를 생성, 이를 기반으로 "ADD x y" 메세지 전송
|	2. 서버는 이를 기반으로 각 드론 정보를 등록(POS 구조체 배열), 구조체 멤버는 포트번호(식별용), x, y
|	3. 서버는 각 클라이언트에 받은 메세지를 그대로 재전송(echo)
|	4. 클라이언트에서 echo 메세지 다시 수신
|	5. 서버에서는 드론 위치를 시각화 (gotoxy(), system("cls") 사용)
|	6. 그러다가 서버에서 키보드로 입력이 들어온 경우(getAsyncKeyState() 사용) {
|	|
|	|	6-A. 입력이 M인 경우{
|	|	|	1)움직일 드론의 포트, x, y를 차례대로 입력
|	|	|	2) 입력받은 대로 서버에서 "MOV x y"명령 전송
|	|	|	3) 클라이언트는 이를 수신, 새로운 좌표로 갱신 후 반복 계속
|	|	}
|	|
|	|	6-B. 입력이 Q인 경우{
|	|	|	1) 서버에서 각 드론들이 정렬(1차 이동: 20m 간격, 고도 100m)된 좌표 계산
|	|	|	2) 계산된 좌표를 각 드론에게 전송, "MOV x y"
|	|	|	3) 모든 드론들을 우측으로 50m씩 이동시키는 좌표 전송
|	|	|	4) 서버 종료
|	|	|	5) 클라이언트도 서버와 연결 해제 확인 후 종료
|	|	}
|	}
|	7. 무한루프
}	
명령어 구성:
	데이터개수 + 데이터 1 + ... + 데이터 n + 명령 종류(a, r, m)
	ex) 25523a - 데이터 2개, x=55, y=23, a 명령(Add)
	명령어 종류:
		1) a: Add - 드론 추가, 데이터 2개(x, y)
		2) r: Refresh - 드론 좌표 갱신용, 데이터 2개(x, y)
		3) m: Move - 목표 좌표 전송, 데이터 3개(x, y, port)

클라 흐름도:

	while(true) {
		대충 현재 좌표 printf() + 서버로 현재 좌표 전송하기send();

서버 흐름도:
	while(true) {
		드론 좌표 recv() + 현재 드론들 좌표 printf();
		
		if( 조건1 ){
			scanf() == 
			if( 명령 1 ){
				드론 위치 이동시키는 명령 전송;
				// (드론 번호, x, y)
				대충 드론의 예상위치 연산 후 범위 벗어나는지 체크하는 과정;
				if(벗어나면) 에러 출력, 무효화;	// 무효 말고 연결 종료시켜도 재밌을듯
			}

			if( 명령 2 ){
				1차 정렬
				2차 이동
				return 0;
			}
		}
	}






